" ===== NeoBundle =====

if has('vim_starting')
  if &compatible
    set nocompatible
  endif

  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

filetype off

call neobundle#begin(expand('~/.vim/bundle/'))

NeoBundleFetch 'Shougo/neobundle.vim'
NeoBundle 'easymotion/vim-easymotion'
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'bling/vim-airline'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'airblade/vim-gitgutter'
NeoBundle 'kien/ctrlp.vim'
NeoBundle 'vim-ruby/vim-ruby'
NeoBundle 'neovimhaskell/haskell-vim'
NeoBundle 'eagletmt/ghcmod-vim'
NeoBundle 'Shougo/vimproc.vim', {
      \ 'build' : {
      \     'windows' : 'tools\\update-dll-mingw',
      \     'cygwin' : 'make -f make_cygwin.mak',
      \     'mac' : 'make',
      \     'linux' : 'make',
      \     'unix' : 'gmake',
      \   },
      \ }
NeoBundle 'scrooloose/syntastic'
NeoBundle 'chriskempson/base16-vim'
NeoBundle 'edkolev/tmuxline.vim'
NeoBundle 'nathanaelkane/vim-indent-guides'
NeoBundle 'elixir-lang/vim-elixir'
NeoBundle 'lambdatoast/elm.vim'
NeoBundle 'jiangmiao/auto-pairs'
NeoBundle 'junegunn/vim-easy-align'
NeoBundle 'tomtom/tcomment_vim'

call neobundle#end()

filetype plugin indent on

NeoBundleCheck

" ===== General Config =====

set number                        "Line numbers
set relativenumber
set numberwidth=2
set cursorline
set backspace=2                   "Allow backspace in insert mode
set history=1000                  "cmdline history
set showcmd                       "Show incomplete cmds at bottom
set showmode                      "Show current mode at bottom
set gcr=a:blinkon0                "Disable cursor blink
set visualbell                    "No sounds
set autoread                      "Reload filed changed outside vim
set hidden                        "Buffers can exist in background
set clipboard=unnamed             "Allow vim to copy to OSX clipboard
syntax on

let mapleader=","
let g:mapleader=","

" ===== Buffers =====

" Open new buffer
map <C-t> :enew<CR>
" Next / previous buffer
map <C-l> :bnext<CR>
map <C-h> :bprevious<CR>

" Close current buffer
map <C-d> :bd<CR>

" ===== Turn off swap files =====

set noswapfile
set nobackup
set nowb

" ===== Persistent Undo =====

if has('persistent_undo') && !isdirectory(expand('~').'/.vim/backups')
  silent !mkdir ~/.vim/backups > /dev/null 2>&1
  set undodir=~/.vim/backups
  set undofile
endif

" ===== Indentation =====

set autoindent
set smartindent
set smarttab
set shiftwidth=2
set softtabstop=2
set tabstop=2
set expandtab

" Auto indent pasted text
nnoremap p p=`]<C-o>
nnoremap P P=`]<C-o>

" Display tabs and trailing spaces visually
set list listchars=tab:\ \ ,trail:Â·

set nowrap       "Don't wrap lines
set linebreak    "Wrap lines at convenient points

" ==== Folds ====

set foldmethod=indent   "fold based on indent
set foldnestmax=3       "deepest fold is 3 levels
set nofoldenable        "dont fold by default

" ==== Completion ====

set wildmode=list:longest
set wildmenu                "enable ctrl-n and ctrl-p to scroll thru matches
set wildignore=*.o,*.obj,*~ "stuff to ignore when tab completing
set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=*DS_Store*
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.png,*.jpg,*.gif

" ==== Scrolling ====

set scrolloff=8         "Start scrolling when we're 8 lines away from margins
set sidescrolloff=15
set sidescroll=1

" ==== Search ====

set incsearch       " Find the next match as we type the search
set hlsearch        " Highlight searches by default
set ignorecase      " Ignore case when searching...
set smartcase       " ...unless we type a capital

" ==== Status line ====

set laststatus=2

" ==== NERDTree ====

" Map CTRL-n to toggle NERDTree
map <C-n> :NERDTreeToggle<CR>

" Autoclose vim if only NERDTree open
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" ==== Vim Airline ====

let g:airline_powerline_fonts = 1
let g:airline_theme='bubblegum'
let g:airline#extensions#tabline#enabled=1
let g:airline#extensions#tabline#buffer_min_count=2
" ==== Syntastic ====

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': [],'passive_filetypes': []  }

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0

" ruby

let g:syntastic_ruby_checkers = ['mri', 'rubocop']

" haskell

" ==== Easy Align ====

xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

" ==== Color scheme ====

set t_Co=256
set background=dark
let base16colorspace=256

colorscheme base16-railscasts
